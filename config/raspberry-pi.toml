#!/bin/bash

# =============================================================================
# DOS Safar Build Script
# Universal ARM Boot Manager for gaming handhelds and Raspberry Pi
# =============================================================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Emojis for better UX
ROCKET="🚀"
GEAR="⚙️"
CHECK="✅"
CROSS="❌"
WARNING="⚠️"
INFO="ℹ️"
PACKAGE="📦"
HAMMER="🔨"

# Default values
TARGET=""
RELEASE_MODE=true
CLEAN_BUILD=false
VERBOSE=false
SKIP_TESTS=false
OUTPUT_DIR="dist"
VERSION=$(grep '^version' Cargo.toml | sed 's/.*"\(.*\)".*/\1/')

# Supported targets
declare -A TARGETS=(
    ["arm32"]="armv7-unknown-linux-gnueabihf"
    ["arm64"]="aarch64-unknown-linux-gnu"
    ["rpi3"]="armv7-unknown-linux-gnueabihf"
    ["rpi4"]="aarch64-unknown-linux-gnu"
    ["rpi5"]="aarch64-unknown-linux-gnu"
    ["anbernic"]="armv7-unknown-linux-gnueabihf"
    ["generic-arm32"]="armv7-unknown-linux-gnueabihf"
    ["generic-arm64"]="aarch64-unknown-linux-gnu"
)

# Device-specific configurations
declare -A DEVICE_CONFIGS=(
    ["rpi3"]="config/raspberry-pi.toml"
    ["rpi4"]="config/raspberry-pi.toml"
    ["rpi5"]="config/raspberry-pi.toml"
    ["anbernic"]="config/anbernic.toml"
)

# =============================================================================
# Helper Functions
# =============================================================================

print_banner() {
    echo -e "${BLUE}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                    🎮 DOS Safar Builder 🎮                   ║"
    echo "║          Universal ARM Boot Manager Build System             ║"
    echo "║                      Version: $VERSION                          ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

log_info() {
    echo -e "${CYAN}${INFO} $1${NC}"
}

log_success() {
    echo -e "${GREEN}${CHECK} $1${NC}"
}

log_error() {
    echo -e "${RED}${CROSS} $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}${WARNING} $1${NC}"
}

log_step() {
    echo -e "${PURPLE}${GEAR} $1${NC}"
}

show_help() {
    cat << EOF
${ROCKET} DOS Safar Build Script

USAGE:
    ./build.sh [OPTIONS]

OPTIONS:
    -t, --target TARGET     Target architecture/device:
                           arm32, arm64, rpi3, rpi4, rpi5, anbernic
                           generic-arm32, generic-arm64
    -d, --debug            Build in debug mode (default: release)
    -c, --clean            Clean build (remove target directory first)
    -v, --verbose          Verbose output
    -s, --skip-tests       Skip running tests
    -o, --output DIR       Output directory (default: dist)
    -h, --help             Show this help message

EXAMPLES:
    ./build.sh -t rpi4              # Build for Raspberry Pi 4
    ./build.sh -t anbernic -d       # Debug build for Anbernic devices
    ./build.sh -t arm64 -c -v       # Clean verbose build for ARM64
    ./build.sh --target rpi3 --output builds

SUPPORTED TARGETS:
    arm32        - Generic ARMv7 (32-bit)
    arm64        - Generic ARMv8 (64-bit)
    rpi3         - Raspberry Pi 3 (ARMv7)
    rpi4         - Raspberry Pi 4 (ARMv8)
    rpi5         - Raspberry Pi 5 (ARMv8)
    anbernic     - Anbernic gaming handhelds (ARMv7)

EOF
}

check_dependencies() {
    log_step "Checking build dependencies..."
    
    # Check Rust installation
    if ! command -v rustc &> /dev/null; then
        log_error "Rust is not installed. Please install Rust from https://rustup.rs/"
        exit 1
    fi
    
    # Check Cargo
    if ! command -v cargo &> /dev/null; then
        log_error "Cargo is not found. Please ensure Rust is properly installed."
        exit 1
    fi
    
    # Check cross-compilation tools
    if [[ "$TARGET" == *"arm"* ]]; then
        if ! command -v arm-linux-gnueabihf-gcc &> /dev/null && [[ "$TARGET" == *"arm32"* ]]; then
            log_warning "ARM32 cross-compiler not found. Installing..."
            sudo apt-get update
            sudo apt-get install -y gcc-arm-linux-gnueabihf
        fi
        
        if ! command -v aarch64-linux-gnu-gcc &> /dev/null && [[ "$TARGET" == *"arm64"* ]]; then
            log_warning "ARM64 cross-compiler not found. Installing..."
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu
        fi
    fi
    
    # Check other build tools
    local tools=("git" "tar" "gzip")
    for tool in "${tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            log_error "Required tool '$tool' is not installed."
            exit 1
        fi
    done
    
    log_success "All dependencies are satisfied"
}

setup_rust_targets() {
    log_step "Setting up Rust targets..."
    
    if [[ -n "$TARGET" ]]; then
        local rust_target="${TARGETS[$TARGET]}"
        if [[ -n "$rust_target" ]]; then
            log_info "Adding Rust target: $rust_target"
            rustup target add "$rust_target"
        else
            log_error "Unknown target: $TARGET"
            exit 1
        fi
    else
        # Add all ARM targets
        log_info "Adding all ARM targets..."
        rustup target add armv7-unknown-linux-gnueabihf
        rustup target add aarch64-unknown-linux-gnu
    fi
    
    log_success "Rust targets configured"
}

clean_build() {
    if [[ "$CLEAN_BUILD" == "true" ]]; then
        log_step "Cleaning previous build artifacts..."
        rm -rf target/
        rm -rf "$OUTPUT_DIR"
        cargo clean
        log_success "Build directory cleaned"
    fi
}

run_tests() {
    if [[ "$SKIP_TESTS" == "false" ]]; then
        log_step "Running tests..."
        
        # Run unit tests
        cargo test --lib
        
        # Run integration tests (if any)
        if [[ -d "tests" ]]; then
            cargo test --tests
        fi
        
        # Run documentation tests
        cargo test --doc
        
        log_success "All tests passed"
    else
        log_warning "Skipping tests"
    fi
}

build_target() {
    local target_name="$1"
    local rust_target="${TARGETS[$target_name]}"
    
    log_step "Building for $target_name ($rust_target)..."
    
    # Set up environment variables for cross-compilation
    case "$rust_target" in
        "armv7-unknown-linux-gnueabihf")
            export CC=arm-linux-gnueabihf-gcc
            export CXX=arm-linux-gnueabihf-g++
            export AR=arm-linux-gnueabihf-ar
            export STRIP=arm-linux-gnueabihf-strip
            ;;
        "aarch64-unknown-linux-gnu")
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
            export AR=aarch64-linux-gnu-ar
            export STRIP=aarch64-linux-gnu-strip
            ;;
    esac
    
    # Build command
    local cargo_cmd="cargo build --target $rust_target"
    
    if [[ "$RELEASE_MODE" == "true" ]]; then
        cargo_cmd="$cargo_cmd --release"
    fi
    
    if [[ "$VERBOSE" == "true" ]]; then
        cargo_cmd="$cargo_cmd --verbose"
    fi
    
    # Execute build
    log_info "Executing: $cargo_cmd"
    eval "$cargo_cmd"
    
    if [[ $? -eq 0 ]]; then
        log_success "Build completed for $target_name"
    else
        log_error "Build failed for $target_name"
        exit 1
    fi
}

create_distribution() {
    local target_name="$1"
    local rust_target="${TARGETS[$target_name]}"
    
    log_step "Creating distribution package for $target_name..."
    
    # Determine build mode directory
    local build_mode="release"
    if [[ "$RELEASE_MODE" == "false" ]]; then
        build_mode="debug"
    fi
    
    local target_dir="target/$rust_target/$build_mode"
    local dist_name="dos-safar-$target_name-v$VERSION"
    local dist_path="$OUTPUT_DIR/$dist_name"
    
    # Create distribution directory
    mkdir -p "$dist_path"
    
    # Copy main binary
    if [[ -f "$target_dir/dos_safar" ]]; then
        cp "$target_dir/dos_safar" "$dist_path/"
        
        # Strip binary if in release mode
        if [[ "$RELEASE_MODE" == "true" ]] && [[ -n "$STRIP" ]]; then
            log_info "Stripping binary..."
            "$STRIP" "$dist_path/dos_safar"
        fi
    else
        log_error "Main binary not found at $target_dir/dos_safar"
        exit 1
    fi
    
    # Copy additional binaries
    for bin in "image_builder" "web_server_test"; do
        if [[ -f "$target_dir/$bin" ]]; then
            cp "$target_dir/$bin" "$dist_path/"
            if [[ "$RELEASE_MODE" == "true" ]] && [[ -n "$STRIP" ]]; then
                "$STRIP" "$dist_path/$bin"
            fi
        fi
    done
    
    # Copy configuration files
    mkdir -p "$dist_path/config"
    cp config/default.toml "$dist_path/config/"
    
    # Copy device-specific config if available
    local device_config="${DEVICE_CONFIGS[$target_name]}"
    if [[ -n "$device_config" ]] && [[ -f "$device_config" ]]; then
        cp "$device_config" "$dist_path/config/device.toml"
    fi
    
    # Copy web assets
    if [[ -d "assets/web" ]]; then
        cp -r assets/web "$dist_path/"
    fi
    
    # Copy documentation
    cp README.MD "$dist_path/"
    cp LICENSE "$dist_path/"
    
    # Create installation script
    create_install_script "$dist_path" "$target_name"
    
    # Create startup script
    create_startup_script "$dist_path" "$target_name"
    
    # Create archive
    log_info "Creating compressed archive..."
    cd "$OUTPUT_DIR"
    tar -czf "$dist_name.tar.gz" "$dist_name/"
    
    # Calculate checksums
    log_info "Generating checksums..."
    sha256sum "$dist_name.tar.gz" > "$dist_name.tar.gz.sha256"
    md5sum "$dist_name.tar.gz" > "$dist_name.tar.gz.md5"
    
    cd - > /dev/null
    
    log_success "Distribution package created: $OUTPUT_DIR/$dist_name.tar.gz"
    
    # Display package info
    local archive_size=$(du -h "$OUTPUT_DIR/$dist_name.tar.gz" | cut -f1)
    log_info "Package size: $archive_size"
    log_info "SHA256: $(cat "$OUTPUT_DIR/$dist_name.tar.gz.sha256" | cut -d' ' -f1)"
}

create_install_script() {
    local dist_path="$1"
    local target_name="$2"
    
    cat > "$dist_path/install.sh" << 'EOF'
#!/bin/bash
# DOS Safar Installation Script

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

INSTALL_DIR="/opt/dos_safar"
SERVICE_FILE="/etc/systemd/system/dos-safar.service"
CONFIG_DIR="/boot/dos_safar"

log_info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
log_success() { echo -e "${GREEN}✅ $1${NC}"; }
log_error() { echo -e "${RED}❌ $1${NC}"; }
log_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }

check_permissions() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root (use sudo)"
        exit 1
    fi
}

install_dos_safar() {
    log_info "Installing DOS Safar..."
    
    # Create installation directory
    mkdir -p "$INSTALL_DIR"
    
    # Copy binaries
    cp dos_safar "$INSTALL_DIR/"
    chmod +x "$INSTALL_DIR/dos_safar"
    
    # Copy additional tools
    for tool in image_builder web_server_test; do
        if [[ -f "$tool" ]]; then
            cp "$tool" "$INSTALL_DIR/"
            chmod +x "$INSTALL_DIR/$tool"
        fi
    done
    
    # Copy configuration
    mkdir -p "$CONFIG_DIR"
    cp -r config/* "$CONFIG_DIR/"
    
    # Copy web assets
    if [[ -d "web" ]]; then
        cp -r web "$INSTALL_DIR/"
    fi
    
    log_success "Files installed to $INSTALL_DIR"
}

create_systemd_service() {
    log_info "Creating systemd service..."
    
    cat > "$SERVICE_FILE" << EOSERVICE
[Unit]
Description=DOS Safar Universal ARM Boot Manager
After=network.target
Wants=network.target

[Service]
Type=simple
ExecStart=$INSTALL_DIR/dos_safar --config $CONFIG_DIR/default.toml
Restart=always
RestartSec=10
User=root
Environment=RUST_LOG=info

[Install]
WantedBy=multi-user.target
EOSERVICE
    
    systemctl daemon-reload
    log_success "Systemd service created"
}

configure_boot() {
    log_info "Configuring boot settings..."
    
    # Backup original cmdline.txt if it exists
    if [[ -f "/boot/cmdline.txt" ]]; then
        cp "/boot/cmdline.txt" "/boot/cmdline.txt.backup"
    fi
    
    # Create DOS Safar boot configuration
    mkdir -p "/boot/dos_safar"
    
    log_success "Boot configuration completed"
}

main() {
    echo -e "${BLUE}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                🎮 DOS Safar Installer 🎮                     ║"
    echo "║        Universal ARM Boot Manager Installation               ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    check_permissions
    install_dos_safar
    create_systemd_service
    configure_boot
    
    echo
    log_success "DOS Safar installed successfully!"
    echo
    log_info "To start DOS Safar:"
    echo "  sudo systemctl enable dos-safar"
    echo "  sudo systemctl start dos-safar"
    echo
    log_info "To check status:"
    echo "  sudo systemctl status dos-safar"
    echo
    log_info "Web interface will be available at:"
    echo "  http://$(hostname -I | awk '{print $1}'):8080"
    echo
}

main "$@"
EOF
    
    chmod +x "$dist_path/install.sh"
}

create_startup_script() {
    local dist_path="$1"
    local target_name="$2"
    
    cat > "$dist_path/start.sh" << 'EOF'
#!/bin/bash
# DOS Safar Quick Start Script

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$SCRIPT_DIR/config/default.toml"

echo "🎮 Starting DOS Safar..."
echo "📂 Directory: $SCRIPT_DIR"
echo "⚙️  Config: $CONFIG_FILE"

# Check if config exists
if [[ ! -f "$CONFIG_FILE" ]]; then
    echo "❌ Configuration file not found: $CONFIG_FILE"
    exit 1
fi

# Start DOS Safar
"$SCRIPT_DIR/dos_safar" --config "$CONFIG_FILE" "$@"
EOF
    
    chmod +x "$dist_path/start.sh"
}

build_all_targets() {
    log_step "Building for all supported targets..."
    
    for target in "${!TARGETS[@]}"; do
        echo
        log_info "Building target: $target"
        build_target "$target"
        create_distribution "$target"
    done
    
    create_build_summary
}

create_build_summary() {
    log_step "Creating build summary..."
    
    local summary_file="$OUTPUT_DIR/build_summary.txt"
    
    cat > "$summary_file" << EOF
DOS Safar Build Summary
=======================
Build Date: $(date)
Version: $VERSION
Build Mode: $([ "$RELEASE_MODE" == "true" ] && echo "Release" || echo "Debug")

Built Packages:
EOF
    
    for file in "$OUTPUT_DIR"/*.tar.gz; do
        if [[ -f "$file" ]]; then
            local size=$(du -h "$file" | cut -f1)
            local name=$(basename "$file")
            echo "  $name ($size)" >> "$summary_file"
        fi
    done
    
    echo >> "$summary_file"
    echo "Checksums:" >> "$summary_file"
    for file in "$OUTPUT_DIR"/*.sha256; do
        if [[ -f "$file" ]]; then
            cat "$file" >> "$summary_file"
        fi
    done
    
    log_success "Build summary created: $summary_file"
}

# =============================================================================
# Main Script Logic
# =============================================================================

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--target)
            TARGET="$2"
            shift 2
            ;;
        -d|--debug)
            RELEASE_MODE=false
            shift
            ;;
        -c|--clean)
            CLEAN_BUILD=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -s|--skip-tests)
            SKIP_TESTS=true
            shift
            ;;
        -o|--output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Main execution
main() {
    print_banner
    
    log_info "Starting DOS Safar build process..."
    log_info "Version: $VERSION"
    log_info "Build mode: $([ "$RELEASE_MODE" == "true" ] && echo "Release" || echo "Debug")"
    log_info "Output directory: $OUTPUT_DIR"
    
    # Create output directory
    mkdir -p "$OUTPUT_DIR"
    
    # Execute build steps
    check_dependencies
    setup_rust_targets
    clean_build
    run_tests
    
    if [[ -n "$TARGET" ]]; then
        # Build specific target
        log_info "Target: $TARGET"
        build_target "$TARGET"
        create_distribution "$TARGET"
    else
        # Build all targets
        build_all_targets
    fi
    
    echo
    log_success "🎉 Build completed successfully!"
    echo
    log_info "📦 Output packages:"
    for file in "$OUTPUT_DIR"/*.tar.gz; do
        if [[ -f "$file" ]]; then
            local size=$(du -h "$file" | cut -f1)
            log_info "  $(basename "$file") ($size)"
        fi
    done
    echo
    log_info "🚀 Ready to deploy to your ARM devices!"
}

# Trap errors
trap 'log_error "Build failed on line $LINENO"' ERR

# Run main function
main "$@"